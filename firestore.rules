rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Stripe customers collection
    match /stripe_customers/{userId} {
      allow read: if isUser(userId);
      allow write: if isUser(userId);
    }

    // Subscriptions collection
    match /subscriptions/{userId} {
      allow read: if isUser(userId);
      // Only allow system/admin to write subscriptions
      allow write: if false;
    }

    // Usage collection
    match /usage/{docId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      // Only allow system/admin to write usage
      allow write: if false;
    }

    // User credits collection
    match /user_credits/{userId} {
      // Allow users to read their own credits
      allow read: if isUser(userId);
      // Allow creating/updating credits (e.g., via webhook)
      // Adjust write permissions based on your specific needs (e.g., only backend/admin)
      // For now, let's restrict writes. You might need to allow writes from your backend functions later.
      allow write: if false; // Or adjust as needed
    }

    // User subscriptions collection (using userId field)
    match /user_subscriptions/{subId} {
      // Allow users to read their own subscription document by checking the userId field
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      // Writes should be restricted to backend/admin processes
      allow write: if false;
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 